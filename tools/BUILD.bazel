"""A BUILD file providing the configuration for the project."""

load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@pypi//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary")
load("//tools:make_var_substitution.bzl", "make_var_substitution")

package(default_visibility = ["//visibility:public"])

exports_files([
    "generate_version_header.bat",
    "pytest_main.py",
    "requirements.txt",
    "ignore_includes.json",
])

######################################################################################
# Custom flags that control build behavior
#
# Pass them to bazel with --//tools:<flag>=<value>
# Example:
# bazel build //delpi:main --//tools:enable_dynamic_build=True
######################################################################################

bool_flag(
    name = "enable_dynamic_build",
    build_setting_default = False,
)

bool_flag(
    name = "enable_static_build",
    build_setting_default = False,
)

bool_flag(
    name = "enable_qsoptex",
    build_setting_default = True,
)

bool_flag(
    name = "enable_soplex",
    build_setting_default = True,
)

bool_flag(
    name = "enable_python_build",
    build_setting_default = False,
)

bool_flag(
    name = "enable_fpic_build",
    build_setting_default = False,
)

bool_flag(
    name = "enable_thread_safe_build",
    build_setting_default = False,
)

###########################################
# Configuration settings
###########################################

config_setting(
    name = "dynamic_build",
    flag_values = {":enable_dynamic_build": "True"},
)

config_setting(
    name = "static_build",
    flag_values = {":enable_static_build": "True"},
)

config_setting(
    name = "python_build",
    flag_values = {":enable_python_build": "True"},
)

config_setting(
    name = "fpic_build",
    flag_values = {":enable_fpic_build": "True"},
)

config_setting(
    name = "thread_safe_build",
    flag_values = {":enable_thread_safe_build": "True"},
)

config_setting(
    name = "enabled_qsoptex",
    flag_values = {":enable_qsoptex": "True"},
)

config_setting(
    name = "enabled_soplex",
    flag_values = {":enable_soplex": "True"},
)

config_setting(
    name = "clang_build",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "clang",
    },
)

config_setting(
    name = "gcc_build",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "gcc",
    },
)

config_setting(
    name = "msvc_cl_build",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "msvc-cl",
    },
)

config_setting(
    name = "clang_cl_build",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "clang-cl",
    },
)

config_setting(
    name = "debug_build",
    values = {"compilation_mode": "dbg"},
)

config_setting(
    name = "release_build",
    values = {"compilation_mode": "opt"},
)

###########################################
# Version header script
###########################################

sh_binary(
    name = "generate_version_header",
    srcs = ["generate_version_header.sh"],
)

###########################################
# Make variable substitution toolchain
###########################################
make_var_substitution(
    name = "make_var_substitution",
)

###########################################
# Bash autocomplete script generator
###########################################
py_binary(
    name = "bash_autocomplete",
    srcs = ["bash_autocomplete.py"],
    main = "bash_autocomplete.py",
    python_version = "PY3",
    deps = [
        requirement("shtab"),
    ],
)
